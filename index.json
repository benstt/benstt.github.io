[{"content":"In my first blog post, Creating a basic on-prem personal blog, I noted what was the plan on building this website. I talked about how I was going to make everything from scratch, including the look of the page, its backend and a server to host it at home.\nI thought that building the web server itself would take ages to do. But that was before trying to the the backend. Gosh, I really did think that was going to be super easy.\nOriginally, I was going to use Django or Gin Gonic for that, but I googled a bit for other frameworks I could use, to get a broader look. The only framework I\u0026rsquo;ve used in the past was Spring, so I though I could use it. Not that I loved using it, but I liked how I could simply put an annotation above a method to specify the HTTP method used, like in, say Flask or Express.js. For example, let\u0026rsquo;s say we have a Controller class that handles one route:\n@Controller @RequestMapping(\u0026#34;/\u0026#34;) public class MyController extends BaseController\u0026lt;MyType\u0026gt; { @RequestMapping(value = \u0026#34;/home\u0026#34;, method = RequestMethod.GET) @ResponseBody public String getHomePage() { return \u0026#34;home\u0026#34;; } } We can easily know this method getHomePage() is a GET request by looking at the body above it — @RequestMapping. You can specify the route that it is attached to in the value parameter. Its convenience catches my eye, as it makes it easier to read. It\u0026rsquo;s not entirely clear what does \u0026ldquo;home\u0026rdquo; mean to someone that haven\u0026rsquo;t touched Spring in their life, though. This is boilerplate that pretty much exist in 99% of a Java codebase. There are a ton of web frameworks in almost every single programming language, so there\u0026rsquo;s a lot to choose from. Why Spring then?\nRocket, and how it\u0026rsquo;s basically just an excuse to learn Rust Soon after I stumbled upon Rocket, an HTTP framework written in Rust. I have heard of it before, but never actually gave it a look. Thought that writing a thing in Rust would only complicate things and not actually getting my stuff done (I\u0026rsquo;m looking at you, Actix). Looking at its webpage, the first thing I saw was an example of use:\n#[macro_use] extern crate rocket; #[get(\u0026#34;/hello/\u0026lt;name\u0026gt;/\u0026lt;age\u0026gt;\u0026#34;)] fn hello(name: \u0026amp;str, age: u8) -\u0026gt; String { format!(\u0026#34;Hello, {} year old named {}!\u0026#34;, age, name) } #[launch] fn rocket() -\u0026gt; _ { rocket::build().mount(\u0026#34;/\u0026#34;, routes![hello]) } \u0026hellip; exactly what I was looking for! (almost) No boilerplates, no confusing class hierarchy, and I can route things with one macro above a function. You could even read it without knowing Rust and still understand what\u0026rsquo;s going on. You define a function that returns a string formatted with the name and age passed to the URL. How great is that? Then you simply mount it to your main function (in this case Rocket provides a wrapping with rocket()) and that\u0026rsquo;s it!\nI always have loved the Rust ecosystem and community. Everything is Open Source, everyone is willing to help you with any trouble you\u0026rsquo;re having and everything is very well documented. But learning it is somewhat difficult. Every person I\u0026rsquo;ve known that is using Rust have dropped it at least 2 o 3 times before trying to learn it again. And that happened to me\u0026hellip; at least 4 times. So I guess Rocket is an excuse to give Rust another try. :)\nStarting wasn\u0026rsquo;t difficult. Rocket\u0026rsquo;s official tutorial covers up the basics to get you up and running building stuff. Then it\u0026rsquo;s about adding more and more stuff in top of that stuff. Basically stuff of stuff. One of the first things I wanted to get working was the ability to enter a url like /post/ and see a post coming up in the page. At first glance, I thought I could write the post and then manually convert it to HTML to let Rocket render it. Not difficult, but that sure gets tedious after doing so 300 times. Just when I was about to make a simple tool to let me put Markdown into an HTML template, I found Tera, a templating engine for Rust, based on the Jinja2/Django templating.\nLet\u0026rsquo;s imagine you have a way to store Posts:\n// Basic, for the sake of simplicity struct Post { title: \u0026amp;\u0026#39;static str, content: \u0026amp;\u0026#39;static str, } and you have the following HTML:\n\u0026lt;body\u0026gt; \u0026lt;!-- Other HTML stuff... --\u0026gt; \u0026lt;!-- Here goes your title --\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;!-- Here goes your content --\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; then all is left to do es combine the two of them to render it to the page:\n// Call this function every time the user routes to /my_post #[get(\u0026#34;/my_post\u0026#34;)] fn get_post() -\u0026gt; Template { let post = Post { title: \u0026#34;my #1 post!!\u0026#34;, content: \u0026#34;hey this is my first post :) heck yea\u0026#34; }; Template::render(\u0026#34;the_html_file_path\u0026#34;, context! { post }) } \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ post.title }}\u0026lt;/h1\u0026gt; \u0026lt;!-- \u0026#34;safe\u0026#34; basically tells Tera to render the markdown correctly --\u0026gt; \u0026lt;p\u0026gt;{{ post.content | safe }}\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; and\u0026hellip; voilà!\nThat\u0026rsquo;s it! You\u0026rsquo;ve created an HTML page from a template and data from a Rust struct. That\u0026rsquo;s actually the most basic thing you can do in Tera. You could even do things like for loops, condition checking and even define macros. For example, here\u0026rsquo;s what I kind of use to render the links in the Related section:\n\u0026lt;ul\u0026gt; {% for link in post.links %} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ link.url }}\u0026#34;\u0026gt;{{ link.title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt; This approach lets me focus more on the actual writing of the posts rather than manually converting and fixing stuff between each one. Combine that with a CommonMark to HTML converter like pulldown_cmark and you\u0026rsquo;re done, just write .md files and let the API handle everything for you.\nOK, but X does that and even more. Why not use it? I really don\u0026rsquo;t know. I just liked how Rocket handle things. Plus I think it\u0026rsquo;s a great way of learn Rust. As I said in my previous post, I like learning stuff by trying and breaking everything, and this is exactly what I wanted in the first place. Rust is a tough language to learn, and if you don\u0026rsquo;t have any meaningful reason on why to do it then it becomes impossible to do so. Rocket may be the thing that launches me (pun intended) onto learning more and more about the language.\nIn the end, all of this is just programming practice and a learning experience. Getting fun is the solid reason why this blog exists, no matter what tool I use, as long as I have fun :)\n","permalink":"https://grbenjamin.github.io/posts/building-a-backend/","summary":"In my first blog post, Creating a basic on-prem personal blog, I noted what was the plan on building this website. I talked about how I was going to make everything from scratch, including the look of the page, its backend and a server to host it at home.\nI thought that building the web server itself would take ages to do. But that was before trying to the the backend.","title":"Building a backend for my website"},{"content":"You\u0026rsquo;re in the middle of deciding what do you want to do. You go to GitHub, click \u0026rsquo;explore\u0026rsquo; and see so many open-source projects in so many programming languages. You say to yourself \u0026lsquo;agh, I really want to do stuff like that some day\u0026rsquo;, so you decide that you\u0026rsquo;re going to start a side project, right away. All these options, all these programming languages, all this topics, you want to learn everything! Where do we start!?\nHaving so many options is definitely a double-edged sword. I often find myself either wanting to learn a language or wanting to do X thing. Be it to build a DNS server in Rust, a game with C++, my own Docker in Go or a compiler in Haskell. How great, fun stuff! With the power of internet and open-source information of nowadays, this isn\u0026rsquo;t difficult to do. A simple Google or GitHub search and you\u0026rsquo;re up and ready! But the thing is, you have to decide on what are you going to do.\nSay you finally decide on learning about databases with C. You\u0026rsquo;ve got the basics and found a nice blog post on creating a SQLite clone from scratch. You begin to read and immediately lose interest as it\u0026rsquo;s like just copying code and seeing that you\u0026rsquo;re not actually learning anything. Reading a bunch of words about parsers and tokenizers from a page on the internet doesn\u0026rsquo;t help you understand a lot about the subject. That happened to me last week. I said to myself \u0026ldquo;I\u0026rsquo;m going to finish that project!\u0026rdquo; \u0026hellip; but just an hour later I was bored as hell.\nMaybe I\u0026rsquo;m more of a research-and-break guy. All of my side projects I\u0026rsquo;ve made began by just getting ideas on things I want to do and actually start coding something. No matter what it is, you type stuff, search documentation, and that slowly builds into a snowball. After an hour you realize you\u0026rsquo;ve been programming for 6 hours. This, of course, works. Learning by doing is the #1 way to learn something. Deciding on something is the difficult part.\nSo I\u0026rsquo;ve decided I\u0026rsquo;m going to build a simple web server to host my blog. My own stuff, where I\u0026rsquo;ll do everything from scratch by myself and not following any tutorial.\nMotivation The mix between university and work lets me learn a lot of stuff, and specially fun stuff. Docker, K8S, AWS, Nginx, Django, Cloud and security stuff and most importantly, the ability to document things and getting them done.\nRecently I have been watching a lot of YouTube, specially videos from Pelado Nerd, an Argentinian youtuber and SRE. Anything you want to learn about Cloud and Operations, he probably has a video on it. Also, there\u0026rsquo;s one Twitch streamer that I found in the last weeks, rwxrob. It quickly became my favourite streamer as watching their streams is like learning by breathing. Seeing stuff about Docker, Kubernetes, Golang in such a deep way is awesome, while also creating a really nice community of cloud, linux, open-source-driven people. I\u0026rsquo;ve asked my teachers at university for some advice on what could I do with my love to Software Engineering and the desire to learn about Operating Systems. They told me I could see if DevOps is the right thing for me, so I\u0026rsquo;m giving it a try by creating this web server entirely from scratch with the things I have learned these past months, and I\u0026rsquo;m willing to even learn a lot more.\nThe plan In order to create it I\u0026rsquo;ll need a couple of things:\nA way to build my own infrastructure and setup a server A way to manage my web resources (just a little, by creating custom URLs to sections of the web) A way to convert Markdown into HTML (all of my blog posts will be written entirely in .md files) A nice looking web page (god I hate front-end webdev, but whatever) Set up a TLS certificate for the web I\u0026rsquo;ll begin by creating some general visual structure of what my blog will look like. Not a lot of fancy stuff, just a basic way to display these words in a page with some styling. That could probably be done by a static generator site like Hugo or Jekyll, but how will I learn then? Then it\u0026rsquo;s about creating a very simple Django or Gin backend stuff. The very basics to just show URLs, like myweb.com/posts/.\nOnce that everything is done, that both front-end and back-end is working with a nice way to convert .md files to plain HTML, I\u0026rsquo;ll setup an Nginx web server running on-prem with TLS certification. This step will probably be the most difficult one as I don\u0026rsquo;t really have a lot of experience building infrastructure this way. But hell, it\u0026rsquo;ll be fun.\nThe journey begins So, to sum up. I\u0026rsquo;ll be doing a lot of stuff from scratch when I could simply use tools on the internet that do the job for me, like hosting on github pages, using a static site generator or letting AWS handle all of the infrastructure. But in that case I wouldn\u0026rsquo;t be learning anything. That\u0026rsquo;ll be like just reading a tutorial on how to create X thing, and we\u0026rsquo;re back to the conflict! Of course, once I have learned how to do all of this stuff myself, in a next ocassion I\u0026rsquo;ll (probably) just use the pre-written tools.\nIt\u0026rsquo;s a long journey. But I will stick to the end. Hopefully this post ends up online :)\n","permalink":"https://grbenjamin.github.io/posts/creating-a-blog/","summary":"You\u0026rsquo;re in the middle of deciding what do you want to do. You go to GitHub, click \u0026rsquo;explore\u0026rsquo; and see so many open-source projects in so many programming languages. You say to yourself \u0026lsquo;agh, I really want to do stuff like that some day\u0026rsquo;, so you decide that you\u0026rsquo;re going to start a side project, right away. All these options, all these programming languages, all this topics, you want to learn everything!","title":"Creating a basic on-prem personal blog"},{"content":"Hey, thanks for caring about knowing me. But I don\u0026rsquo;t have this page yet.\n","permalink":"https://grbenjamin.github.io/about/","summary":"Hey, thanks for caring about knowing me. But I don\u0026rsquo;t have this page yet.","title":"About"},{"content":"Random thoughts. Inspired by mahdi.\nto fill!\n","permalink":"https://grbenjamin.github.io/snippets/","summary":"Random thoughts. Inspired by mahdi.\nto fill!","title":"Snippets"}]